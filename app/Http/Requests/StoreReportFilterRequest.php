<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;

class StoreReportFilterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Prepare the data for validation.
     *
     * This function merges the 'slug' key into the request data.
     * The value of 'slug' is generated by slugifying the 'name' value.
     *
     * @return void
     */
    protected function prepareForValidation()
    {
        $this->merge(['slug' => Str::slug($this->name)]);
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'name' => 'required',
            'slug' => [
                'required',
                Rule::unique('report_filters', 'slug')
                ->where('user_id', Auth::id())
                ->where('report_name', $this->report_name)
            ],
            'project_ids' => 'nullable|array',
            'client_ids' => 'nullable|array',
            'session_type_ids' => 'nullable|array',
            'report_name' => 'required',
        ];
    }

    /**
     * Returns an array of validation error messages.
     *
     * @return array An associative array where the keys are the validation rules
     *               and the values are the corresponding error messages.
     */
    public function messages()
    {
        return [
            'name.required' => 'The filter name is required.',
            'slug.unique' => 'The filter name is already in use.',
        ];
    }

    /**
     * Retrieves the validated attributes and adds the user ID.
     *
     * @return array The validated attributes with the user ID.
     */
    public function validated($key = null, $default = null)
    {
        $attributes = parent::validated();
        $attributes['user_id'] = Auth::id();

        return $attributes;
    }
}
